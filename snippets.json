{
	"Create Solve Function": {
		"description": "Create Solve Function",
		"prefix": "def solve(params)",
		"body": [
			"def solve(${1:N}):",
			"\treturn ",
			"",
			"print(solve($1))"
		]
	},
	"Create Check Function": {
		"description": "Create Check Function",
		"prefix": "def check(params)",
		"body": [
			"def check(${1:N}):",
			"\treturn ",
			"",
			"if check($1):",
			"\tprint('Yes')",
			"else:",
			"\tprint('No')"
		]
	},
	"Scan String": {
		"description": "Scan String",
		"prefix": "S = input()",
		"body": [
			"${1:S} = input()"
		]
	},
	"Scan Number": {
		"description": "Scan Number",
		"prefix": "N = int(input())",
		"body": [
			"${1:N} = int(input())"
		]
	},
	"Scan Numbers": {
		"description": "Scan Numbers",
		"prefix": "N = [int(_) for _ in input().split()]",
		"body": [
			"${1:N} = [int(_) for _ in input().split()]"
		]
	},
	"Scan Numbers from Multi Lines": {
		"description": "Scan Numbers from Multi Lines",
		"prefix": "N = [[int(_) for _ in input().split()] for i in range(N)]",
		"body": [
			"${1:N} = [[int(_) for _ in input().split()] for i in range(N)]"
		]
	},
	"Import Modules for AtCoder": {
		"description": "Import Modules for AtCoder",
		"prefix": "import atcoder",
		"body": [
			"from fractions import gcd",
			"from collections import Counter, deque, defaultdict",
			"from heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge",
			"from bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort",
			"from itertools import accumulate, product, permutations, combinations"
		]
	}
}
